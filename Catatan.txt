terdapat 3 jenis akun
Pembeli (R101)
Toko (R101, R102)
Koperasi (R101, R102, R103, R104)
terdapat 4 jenis role
R101 : Dapat membeli
R102 : Dapat menjual
R103 : Dapat bertransaksi dengan koperasi lain
R104 : Dapat membuat akun toko

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaGthMGh5ZzAwMDB6cGx3dnJ6d2t6MjMiLCJyb2xlIjpbIlIxMDEiXSwiaWF0IjoxNjgzODg5NTE2fQ.KX4jfG2knNdlFbs4CATVI9j9-gErUEVx1nv8f-sWRdg
Bukan Enrico
Koperasi

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaGtpY3dkYTAwMDA0aHVvbzd0dG92ZzMiLCJyb2xlIjpbIlIxMDIiXSwiaWF0IjoxNjg0MTE3MDU5fQ.z-p2-k3r9xOfxfYKeQvztwLkKH7rjPeit4AY50aWOr4
Kevin tanuwijaya
Koperasi


SIKOPI_DATABASE_URL="postgresql://sikopi_admin:i&Yk8j%2vFY6GJx@localhost:5432/sikopi"

SIKOPI_CLOUD_NAME="dlz675v0x"
SIKOPI_API_KEY="718332891837113"
SIKOPI_API_SECRET="AwUPPLAIGpRqIsR8hahA_4VjNb8"


buat transaction api dari prisma buat
- transaksi order

Buat logic biar jumlah stok berubah pas org nambah stok

coba deploy lagi ke server




const fs   = require('fs');
const jwt   = require('jsonwebtoken');

// use 'utf8' to get string instead of byte array  (512 bit key)
var privateKEY  = fs.readFileSync('./private.key', 'utf8');
var publicKEY  = fs.readFileSync('./public.key', 'utf8');  
module.exports = {
 sign: (payload, $Options) => {
  /*
   sOptions = {
    issuer: "Authorizaxtion/Resource/This server",
    subject: "iam@user.me", 
    audience: "Client_Identity" // this should be provided by client
   }
  */
  // Token signing options
  var signOptions = {
      issuer:  $Options.issuer,
      subject:  $Options.subject,
      audience:  $Options.audience,
      expiresIn:  "30d",    // 30 days validity
      algorithm:  "RS256"    
  };
  return jwt.sign(payload, privateKEY, signOptions);
},
verify: (token, $Option) => {
  /*
   vOption = {
    issuer: "Authorization/Resource/This server",
    subject: "iam@user.me", 
    audience: "Client_Identity" // this should be provided by client
   }  
  */
  var verifyOptions = {
      issuer:  $Option.issuer,
      subject:  $Option.subject,
      audience:  $Option.audience,
      expiresIn:  "30d",
      algorithm:  ["RS256"]
  };
   try{
     return jwt.verify(token, publicKEY, verifyOptions);
   }catch (err){
     return false;
   }
},
 decode: (token) => {
    return jwt.decode(token, {complete: true});
    //returns null if token is invalid
 }
}