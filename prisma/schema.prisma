// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// ROLES =
// 101 : Admin
// 102 : Pembeli
// 103 : Penjual
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_SIKOPI_DATABASE_URL")
}

// model Admin {
//   id         String    @id @unique @default(cuid())
//   createdAt  DateTime  @default(now())
//   modifiedAt DateTime? @default(now()) @updatedAt

//   username String @unique
//   password String
// }

model User {
  id         String    @id @unique @default(cuid())
  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @default(now()) @updatedAt

  username        String   @unique
  password        String
  namaLengkap     String
  jenisAkun       String
  noIndukKoperasi String?
  gambar          String?
  deskripsi       String?
  noTelpon        String?
  pengunjung      Int      @default(0)
  role            ROLES[]  @default([R101])
  active          Boolean? @default(true)

  alamat    Alamat?
  keranjang Keranjang?
  produk    Produk[]
  order     Order[]
  orderToko OrderToko[]
}

enum ROLES {
  R101
  R102
  R103
  R104
}

model Alamat {
  id         String    @id @unique @default(cuid())
  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @default(now()) @updatedAt

  provinsi     String
  kabupaten    String?
  kecamatan    String?
  kodePos      String?
  detailAlamat String?
  latitude     Decimal?
  longitude    Decimal?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Produk {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  namaProduk String
  gambar     String[]
  deskripsi  String
  sku        String?
  harga      Float
  stok       Int
  terjual    Int      @default(0)
  berat      Int      @default(0)
  panjang    Int      @default(0)
  tinggi     Int      @default(0)
  lebar      Int      @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  itemKeranjang   ItemKeranjang[]
  kategori_produk ProdukKategori[]
  itemOrder       ItemOrder[]
}

model Kategori {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  kategori  String
  deskripsi String
  gambar    String

  produk_kategori ProdukKategori[]
}

// Relasi produk - kategori
model ProdukKategori {
  createdAt DateTime @default(now())

  produk     Produk   @relation(fields: [produkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produkId   String
  kategori   Kategori @relation(fields: [kategoriId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  kategoriId String

  @@id([produkId, kategoriId])
}

model ItemKeranjang {
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  kuantitas Int   @default(0)
  subTotal  Float @default(0)

  produkId String
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)

  Keranjang   Keranjang @relation(fields: [keranjangId], references: [id])
  keranjangId String

  @@id([produkId, keranjangId])
}

model Keranjang {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  total Float @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  itemKeranjang ItemKeranjang[]
}

model ItemOrder {
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  produkId String
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: NoAction)

  orderToko   OrderToko @relation(fields: [orderTokoId], references: [id], onDelete: Cascade)
  orderTokoId String

  kuantitas Int   @default(0)
  subTotal  Float @default(0)

  @@id([produkId, orderTokoId])
}

model OrderToko {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  tokoId String
  toko   User   @relation(fields: [tokoId], references: [id], onDelete: Cascade)

  noResi        String         @default("-")
  ongkosKirim   Float          @default(0)
  subTotal      Float          @default(0)
  statusPesanan STATUS_PESANAN @default(PESANAN_DITERIMA)

  itemOrder ItemOrder[]
}

model Order {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  total            Float             @default(0)
  biayaLayanan     Float             @default(0)
  biayaTransaksi   Float             @default(0)
  statusPembayaran STATUS_PEMBAYARAN @default(MENUNGGU_PEMBAYARAN)
  metodePembayaran String            @default("Cashless")
  token            String?

  orderToko      OrderToko[]
  transaksiOrder TransaksiOrder?
}

model TransaksiOrder {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  statusCode       String
  statusMessage    String
  totalPembayaran  Float
  metodePembayaran String
  statusTransaksi  String
  waktuTransaksi   String
  pdf              String?
  fraudStatus      String
  bank             String?
  vaNumber         String?
}

enum STATUS_PESANAN {
  PESANAN_DITERIMA
  PESANAN_DIPROSES
  PESANAN_DIKIRIM
  DIBATALKAN
  SELESAI
}

enum STATUS_PEMBAYARAN {
  MENUNGGU_PEMBAYARAN
  PEMBAYARAN_DITERIMA
  PEMBAYARAN_DIBATALKAN
  PEMBAYARAN_KADALUARSA
}

// model RiwayatOrder {

// }
